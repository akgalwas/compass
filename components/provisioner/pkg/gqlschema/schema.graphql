input RuntimeID {
  id: ID!
}

type AsyncOperationID {
  id: ID!
}

input RuntimeConfig {
  clusterConfig: ClusterConfig!
  kymaConfig: KymaConfig!
}

# Defines the desired cluster to provision, specifying its size, memory, kubernetes version, etc...
input ClusterConfig {
  name: String!
  size: String
  memory: String
  computeZone: String!
  version: String
  credentials: String!
  infrastructureProvider: InfrastructureProvider!
}

# To discuss: what is the list of supported providers?
enum InfrastructureProvider {
  GKE
  AKS
  Gardener
}

input KymaConfig {
  version: String!
  modules: [KymaModule!]
}

enum KymaModule {
  Backup
  BackupInit
  Jaeger
  Logging
  Monitoring
  PrometheusOperator
  Kiali
  KnativeBuild
}

input UpgradeRuntimeConfig {
  clusterConfig: ClusterUpgradeConfig!
  kymaConfig: KymaConfig!
}

input ClusterUpgradeConfig {
  version: String!
}

type OperationStatus {
  operation: OperationType!
  state: OperationState!
  message: string!
  errors: [Error]
}

enum OperationType {
  Provisioning
  Upgrade
  Deprovisioning
  RuntimeReconnecting
}

type Error {
  message: String
}

type RuntimeConnectionStatus {
  status: RuntimeAgentConnectionStatus!
  errors: [Errors!]
}

type RuntimeStatus {
  lastOperationStatus: OperationStatus
  runtimeConnectionStatus: RuntimeConnectionStatus
  runtimeConnectionConfig: RuntimeConnectionConfig
}

enum OperationState {
  Pending
  InProgress
  Succeeded
  Failed
}

enum RuntimeAgentConnectionStatus {
  Pending
  Connected
  Disconnected
}

type RuntimeConnectionConfig {
  kubeconfig: String!
}

type Mutation {
  # Runtime Management ; only one asynchronous operation per RuntimeID can run at any given point of time    
  provisionRuntime(id: RuntimeID, config: RuntimeConfig): AsyncOperationID
  upgradeRuntime(id: RuntimeID, config: UpgradeRuntimeConfig): AsyncOperationID
  deprovisionRuntime(id: RuntimeID): AsyncOperationID

  # Compass Runtime Agent Connection Management
  reconnectRuntimeAgent(id: RuntimeID): AsyncOperationID
}

type Query {
  # Provides current status of specified Runtime 
  runtimeStatus(id: RuntimeID): RuntimeStatus

  # Provides status of specified operation
  runtimeOperationStatus(id: AsyncOperationID): OperationStatus
}