// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import types "github.com/kyma-incubator/hydroform/types"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Credentials provides a mock function with given fields: cluster, provider
func (_m *Client) Credentials(cluster *types.Cluster, provider *types.Provider) ([]byte, error) {
	ret := _m.Called(cluster, provider)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(*types.Cluster, *types.Provider) []byte); ok {
		r0 = rf(cluster, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.Cluster, *types.Provider) error); ok {
		r1 = rf(cluster, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Deprovision provides a mock function with given fields: cluster, provider
func (_m *Client) Deprovision(cluster *types.Cluster, provider *types.Provider) error {
	ret := _m.Called(cluster, provider)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Cluster, *types.Provider) error); ok {
		r0 = rf(cluster, provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Provision provides a mock function with given fields: cluster, provider
func (_m *Client) Provision(cluster *types.Cluster, provider *types.Provider) (*types.Cluster, error) {
	ret := _m.Called(cluster, provider)

	var r0 *types.Cluster
	if rf, ok := ret.Get(0).(func(*types.Cluster, *types.Provider) *types.Cluster); ok {
		r0 = rf(cluster, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Cluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.Cluster, *types.Provider) error); ok {
		r1 = rf(cluster, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Status provides a mock function with given fields: cluster, provider
func (_m *Client) Status(cluster *types.Cluster, provider *types.Provider) (*types.ClusterStatus, error) {
	ret := _m.Called(cluster, provider)

	var r0 *types.ClusterStatus
	if rf, ok := ret.Get(0).(func(*types.Cluster, *types.Provider) *types.ClusterStatus); ok {
		r0 = rf(cluster, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ClusterStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.Cluster, *types.Provider) error); ok {
		r1 = rf(cluster, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
